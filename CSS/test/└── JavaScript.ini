└── JavaScript
    │   (JavaScript is a high-level, often just-in-time compiled language that conforms to the ECMAScript specification. It is a programming language that enables interactive web pages and is an essential part of web applications.)
    │
    ├── Core Language Features
    │   │   (The fundamental building blocks of the JavaScript language, including its syntax, data types, operators, control structures, functions, and object-oriented capabilities. The language has evolved significantly, particularly since ECMAScript 2015 (ES6), introducing many features that make JavaScript more powerful and expressive for complex application development.)
    │   │
    │   ├── Data Types [22, 23]
    │   │   ├── Primitives
    │   │   │   ├── `String` (Sequence of characters)
    │   │   │   ├── `Number` (Floating-point numbers, includes `NaN`, `Infinity`)
    │   │   │   ├── `BigInt` (Arbitrary-precision integers)
    │   │   │   ├── `Boolean` (`true` or `false`)
    │   │   │   ├── `Undefined` (Value of uninitialized variables)
    │   │   │   ├── `Null` (Intentional absence of any object value)
    │   │   │   └── `Symbol` (Unique and immutable primitive value)
    │   │   └── `Object` (Collections of properties; all non-primitive types are objects)
    │   │
    │   ├── Variables & Declarations
    │   │   ├── `var` (Function-scoped or global, hoisted with `undefined` initialization)
    │   │   ├── `let` (Block-scoped, hoisted but in Temporal Dead Zone (TDZ))
    │   │   ├── `const` (Block-scoped, hoisted but in TDZ, immutable binding, must be initialized)
    │   │   ├── Scope (Global, Function/Local, Block, Lexical/Static)
    │   │   └── Hoisting (Declarations moved to top, initializations are not for `var`)
    │   │
    │   ├── Operators [22, 24]
    │   │   ├── Assignment: `=`, `+=`, `-=`, `*=`, `/=`, `%=`, `**=`, `&&=`, `||=`, `??=`
    │   │   ├── Comparison: `==` (loose equality), `!=` (loose inequality), `===` (strict equality), `!==` (strict inequality), `>`, `<`, `>=`, `<=`
    │   │   ├── Arithmetic: `+`, `-`, `*`, `/`, `%` (remainder), `**` (exponentiation), `++` (increment), `--` (decrement)
    │   │   ├── Bitwise: `&` (AND), `|` (OR), `^` (XOR), `~` (NOT), `<<` (left shift), `>>` (sign-propagating right shift), `>>>` (zero-fill right shift)
    │   │   ├── Logical: `&&` (logical AND), `||` (logical OR), `!` (logical NOT)
    │   │   ├── String: `+` (concatenation), `+=`
    │   │   ├── Conditional (Ternary): `condition? exprIfTrue : exprIfFalse`
    │   │   ├── Unary: `delete`, `typeof`, `void`, `+` (unary plus), `-` (unary negation)
    │   │   ├── Relational: `in` (property in object), `instanceof` (object is instance of constructor)
    │   │   ├── Comma: `,` (evaluates multiple expressions, returns the last)
    │   │   ├── Spread/Rest: `...` (spread in function calls/arrays/objects; rest for function parameters/destructuring)
    │   │   ├── Optional Chaining: `obj?.prop` / `obj?.[expr]` / `func?.(...args)`
    │   │   ├── Nullish Coalescing: `leftExpr?? rightExpr`
    │   │   └── Grouping: `()`
    │   │
    │   ├── Control Flow [25, 26]
    │   │   ├── Conditional Statements
    │   │   │   ├── `if...else if...else`
    │   │   │   └── `switch...case...default` (with `break`)
    │   │   ├── Loops & Iteration
    │   │   │   ├── `for (initializer; condition; afterthought)`